/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_parallax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/parallax */ "./js/modules/parallax.js");
/* harmony import */ var _modules_video__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/video */ "./js/modules/video.js");
/* harmony import */ var _modules_fileLoad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/fileLoad */ "./js/modules/fileLoad.js");
/* harmony import */ var _modules_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/helper */ "./js/modules/helper.js");
/* harmony import */ var _modules_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/menu */ "./js/modules/menu.js");
/* harmony import */ var _modules_intersectFilm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/intersectFilm */ "./js/modules/intersectFilm.js");
/* harmony import */ var _modules_intersectFilm__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_modules_intersectFilm__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _modules_preview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/preview */ "./js/modules/preview.js");
/* harmony import */ var _utils_ValidForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/ValidForm */ "./js/utils/ValidForm.js");








Object(_modules_parallax__WEBPACK_IMPORTED_MODULE_0__["default"])();
Object(_modules_video__WEBPACK_IMPORTED_MODULE_1__["default"])();
Object(_modules_fileLoad__WEBPACK_IMPORTED_MODULE_2__["default"])();
var debounceDelay = 300;
var timer = null;
document.addEventListener('click', function (e) {
  var showPass = e.target.closest('.show-password');
  var navButton = e.target.closest('.nav__toggle');
  var categoryBtn = e.target.closest('.category-btn');
  var btnDetails = e.target.closest('.film__watch');

  if (btnDetails) {
    if (!timer) {
      Object(_modules_preview__WEBPACK_IMPORTED_MODULE_6__["showPreview"])(btnDetails);
    }

    clearTimeout(timer);
    timer = setTimeout(function () {
      return timer = null;
    }, debounceDelay);
  }

  if (showPass) {
    Object(_modules_helper__WEBPACK_IMPORTED_MODULE_3__["showPassword"])(showPass);
  }

  if (navButton) {
    Object(_modules_menu__WEBPACK_IMPORTED_MODULE_4__["toggleMenu"])(navButton, 'menu-active');
  }

  if (categoryBtn) {
    Object(_modules_menu__WEBPACK_IMPORTED_MODULE_4__["toggleMenu"])(categoryBtn, 'category-active');
  }
}, {
  passive: true
});
var authForm = document.querySelector('.profile');

if (authForm) {
  new _utils_ValidForm__WEBPACK_IMPORTED_MODULE_7__["Validate"](authForm);
}

var mainSlider = document.querySelector('.banner');

if (mainSlider) {
  new Flickity(mainSlider, {
    wrapAround: true,
    setGallerySize: false,
    autoPlay: true,
    prevNextButtons: false // watchCSS: true,

  });
}

var categorySlider = document.querySelector('.favorite__list');

if (categorySlider) {
  new Flickity(categorySlider, {
    cellAlign: 'left',
    freeScroll: true,
    contain: true,
    prevNextButtons: false,
    pageDots: false
  });
}

var detailsSlider = document.querySelector('.details-slider');

if (detailsSlider) {
  new Flickity(detailsSlider, {
    cellAlign: 'left',
    freeScroll: true,
    contain: true,
    prevNextButtons: false,
    pageDots: false,
    setGallerySize: false
  });
}

/***/ }),

/***/ "./js/modules/fileLoad.js":
/*!********************************!*\
  !*** ./js/modules/fileLoad.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  var avatar = document.querySelector('.avatar-profile img');
  var fileLoader = document.querySelector('#fileLoader');

  if (!avatar || !fileLoader) {
    return;
  }

  fileLoader.addEventListener('change', function (_ref) {
    var target = _ref.target;
    avatar.src = URL.createObjectURL(target.files[0]);
  });
});

/***/ }),

/***/ "./js/modules/helper.js":
/*!******************************!*\
  !*** ./js/modules/helper.js ***!
  \******************************/
/*! exports provided: showPassword */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showPassword", function() { return showPassword; });
var showPassword = function showPassword(btn) {
  var input = btn.parentElement.querySelector('input');

  if (btn.classList.contains('show')) {
    btn.classList.remove('show');
    input.type = 'password';
  } else {
    btn.classList.add('show');
    input.type = 'text';
  }
};

/***/ }),

/***/ "./js/modules/intersectFilm.js":
/*!*************************************!*\
  !*** ./js/modules/intersectFilm.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

document.addEventListener('DOMContentLoaded', function () {
  var lazyImages = [].slice.call(document.querySelectorAll('.lazy-img'));
  var delay = 1;

  if ('IntersectionObserver' in window) {
    var lazyFilmObserver = new IntersectionObserver(function (entries) {
      entries.forEach(function (img) {
        if (img.isIntersecting) {
          img.target.style.transitionDelay = "0.".concat(delay++, "s");
          img.target.classList.remove('inv');
          var source = img.target.querySelector('source');

          if (source) {
            source.srcset = source.dataset.srcset;
          }

          lazyFilmObserver.unobserve(img.target);
        }
      });
      delay = 1;
    });
    lazyImages.forEach(function (img) {
      return lazyFilmObserver.observe(img);
    });
  }
});

/***/ }),

/***/ "./js/modules/menu.js":
/*!****************************!*\
  !*** ./js/modules/menu.js ***!
  \****************************/
/*! exports provided: toggleMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleMenu", function() { return toggleMenu; });
/* harmony import */ var _preview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./preview */ "./js/modules/preview.js");

var isTouch = false;
var touchWidth = 1200;
var body = document.body;

var invertExpanded = function invertExpanded(el) {
  return el.getAttribute('aria-expanded') === 'false' ? 'true' : 'false';
};

var menuBtns = document.querySelectorAll('.category-btn, .nav__toggle');
var toggleMenu = function toggleMenu(btn, activeClass) {
  if (!isTouch) {
    return;
  }

  btn.setAttribute('aria-expanded', invertExpanded(btn));
  body.classList.toggle(activeClass);
};

if (document.documentElement.clientWidth < touchWidth) {
  isTouch = true;
}

window.addEventListener('resize', function () {
  if (document.documentElement.clientWidth > touchWidth && isTouch) {
    body.classList.remove('menu-active', 'category-active');
    menuBtns.forEach(function (btn) {
      return btn.setAttribute('aria-expanded', 'false');
    });
    isTouch = false;
    return;
  }

  if (document.documentElement.clientWidth <= touchWidth && !isTouch) {
    Object(_preview__WEBPACK_IMPORTED_MODULE_0__["removePreview"])();
    isTouch = true;
  }
});

/***/ }),

/***/ "./js/modules/parallax.js":
/*!********************************!*\
  !*** ./js/modules/parallax.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  var images = document.querySelectorAll('.blob-parallax');

  if (!images.length) {
    return;
  }

  var ticking = false;
  var lastScrollY = 0;
  var innerHeight = document.documentElement.offsetHeight;

  function onResize() {
    innerHeight = document.documentElement.offsetHeight;
  }

  function onScroll() {
    if (!ticking) {
      ticking = true;
      requestAnimationFrame(updateElements);
      lastScrollY = window.pageYOffset;
    }
  }

  function updateElements() {
    var relativeY = lastScrollY / innerHeight;
    images.forEach(function (img) {
      img.style.transform = 'translate3d(0,' + relativeY * 500 + 'px, 0)';
    });
    ticking = false;
  }

  window.addEventListener('resize', onResize);
  window.addEventListener('scroll', onScroll);
});

/***/ }),

/***/ "./js/modules/preview.js":
/*!*******************************!*\
  !*** ./js/modules/preview.js ***!
  \*******************************/
/*! exports provided: removePreview, showPreview */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removePreview", function() { return removePreview; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showPreview", function() { return showPreview; });
var previewTemplate = document.querySelector('.preview');
var itemsInRow = 4;
var activePreview = null;
var currentParent = null;
var currentStarter = null;
var cashe = {};

var insertChild = function insertChild(index, parent, arrEls) {
  if (activePreview) {
    removePreview();
  }

  var preview = previewTemplate.cloneNode(true);
  var btnClose = preview.querySelector('.preview__close');
  btnClose.addEventListener('click', function () {
    removePreview();
  });
  preview.dataset.index = index;
  updateModalField(preview);
  arrEls[index - 1].after(preview);
  setTimeout(function () {
    activePreview = preview;
    document.addEventListener('keydown', function (e) {
      if (activePreview && e.key === 'Escape') {
        removePreview();
      }
    }, {
      once: true
    });
    preview.classList.add('preview--visible');
  }, 200);
};

var removePreview = function removePreview() {
  if (activePreview) {
    activePreview.addEventListener('transitionend', function () {
      this.remove();
    }, {
      once: true
    });
    activePreview.classList.remove('preview--visible');
    activePreview = null;
    currentStarter.focus();
  }
};

var updateModalField = function updateModalField(modal) {
  console.log('updateModalField from server', modal);
};

var getRowForPreview = function getRowForPreview(index, parent, arrEls) {
  // определяем после какого ряда добавить preview окно
  if (index === -1) {
    return;
  }

  var reviewIndex = null;
  var totalRows = Math.ceil(arrEls.length / itemsInRow);

  for (var i = itemsInRow; i <= totalRows * itemsInRow; i += itemsInRow) {
    if (index < i) {
      reviewIndex = i;
      break;
    }
  } // если открыто превью и мы нажимаем на другом ряду, закрываем предыдущее окно


  if (activePreview && +activePreview.dataset.index === reviewIndex && currentParent === parent) {
    updateModalField(activePreview);
    return;
  }

  currentParent = parent;
  insertChild(reviewIndex, parent, arrEls);
};

var showPreview = function showPreview(btn) {
  var filmsParent = btn.closest('.film-list');

  if (!filmsParent || !previewTemplate) {
    return;
  }

  currentStarter = btn;
  var id = btn.dataset.details;
  var films = [].slice.call(filmsParent.querySelectorAll('.film-item'));
  var index = films.indexOf(document.getElementById(id));
  getRowForPreview(index, filmsParent, films);
};

/***/ }),

/***/ "./js/modules/video.js":
/*!*****************************!*\
  !*** ./js/modules/video.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  var play = document.querySelector('#play-trailer');
  var video = document.querySelector('video');
  var trailerWrap = document.querySelector('.trailer__wrap');

  if (!play || !video || !trailerWrap) {
    return;
  }

  play.addEventListener('click', function () {
    trailerWrap.classList.add('playing'); // video.firstElementChild.src = video.firstElementChild.dataset.src;
    // video.load();

    video.play();
  }, {
    once: true
  });
});

/***/ }),

/***/ "./js/utils/ValidForm.js":
/*!*******************************!*\
  !*** ./js/utils/ValidForm.js ***!
  \*******************************/
/*! exports provided: Validate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Validate", function() { return Validate; });
/* harmony import */ var _phoneMask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./phoneMask */ "./js/utils/phoneMask.js");
/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal */ "./js/utils/modal.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var config = {
  regEmail: /^\s*[\w.-]+@[\w-]+\.(?:[\w-]+\.)?[A-Za-z]{2,8}\s*$/
};
var errorMessages = {
  required: '',
  phone: '',
  email: ''
};
var url = 'data/errorMes.json';
var xhr = new XMLHttpRequest();
xhr.open('GET', url);
xhr.send();

xhr.onload = function () {
  if (xhr.status === 200) {
    errorMessages = JSON.parse(xhr.response);
  }
}; // fetch(url).then((res) => res.json()).then((res) => errorMessages = res).catch(() => {});


var Validate = /*#__PURE__*/function () {
  function Validate(form, conf) {
    _classCallCheck(this, Validate);

    this.form = form;
    this.defaultConfig = {
      url: 'https://echo.htmlacademy.ru',
      transferInfo: {
        success: 'Данные успешно обновлены',
        bad: 'Удаленный сервер не найден',
        error: 'Сервер недоступен'
      }
    };
    this.config = Object.assign(this.defaultConfig, conf);
    this.init();
  }

  _createClass(Validate, [{
    key: "init",
    value: function init() {
      this.form.addEventListener('focusin', this);
      this.form.addEventListener('focusout', this);
      this.form.addEventListener('click', this);
      this.form.addEventListener('submit', this);
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(e) {
      var _this = this;

      switch (e.type) {
        case 'focusin':
          if (e.target.hasAttribute('data-validate')) {
            e.target.setCustomValidity('');

            if (e.target.dataset.validate === 'phone') {
              Object(_phoneMask__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target);
            }
          }

          break;

        case 'focusout':
          if (e.target.hasAttribute('data-validate')) {
            this.checkValue(e.target);
          }

          break;

        case 'click':
          if (e.target.closest('[type="submit"]')) {
            var inputs = e.currentTarget.querySelectorAll('[data-validate]:not([disabled])');
            inputs.forEach(function (input) {
              input.parentElement.classList.add('validate');

              _this.checkValue(input);

              if (!_this.form.checkValidity()) {
                // если форма не валидна
                _this.form.addEventListener('animationend', function () {
                  _this.form.classList.remove('form-invalid');
                }, {
                  once: true
                });

                _this.form.classList.add('form-invalid');
              }
            });
          }

          break;

        case 'submit':
          e.preventDefault();
          this.sendData(this.form);
      }
    }
  }, {
    key: "setErrorMes",
    value: function setErrorMes(target, message) {
      var errorEl = target.parentElement.querySelector('[data-error]');

      if (errorEl) {
        errorEl.innerText = message;
      }

      target.setCustomValidity(message);
    }
  }, {
    key: "checkValue",
    value: function checkValue(target) {
      var _this2 = this;

      target.parentElement.classList.add('validate');

      if (!target.value && target.required) {
        this.setErrorMes(target, errorMessages.required);
        return;
      }

      if (target.dataset.validate === 'email') {
        target.value = target.value.trim();

        if (target.value && !config.regEmail.test(target.value)) {
          this.setErrorMes(target, errorMessages.email);
          return;
        }
      }

      if (target.dataset.validate === 'phone') {
        setTimeout(function () {
          var phoneLength = target.value.replace(/\D/g, '').length;

          if (target.value && phoneLength < 11) {
            _this2.setErrorMes(target, errorMessages.phone);
          }
        });
      }
    }
  }, {
    key: "beforeSending",
    value: function beforeSending() {
      var spinner = document.querySelector('#spinner');

      if (spinner) {
        spinner.classList.remove('hidden');
        _modal__WEBPACK_IMPORTED_MODULE_1__["objModal"].frozen = true;
      }
    }
  }, {
    key: "afterSending",
    value: function afterSending() {
      var spinner = document.querySelector('#spinner');

      if (spinner) {
        spinner.classList.add('hidden');
        _modal__WEBPACK_IMPORTED_MODULE_1__["objModal"].frozen = false;
      }
    }
  }, {
    key: "transferAction",
    value: function transferAction(status) {
      if (status === 'success') {
        console.log('success');
        window.location.pathname = '/auth.html';
      } else {
        var modalInfo = document.querySelector('#modal-success');

        if (modalInfo) {
          var title = modalInfo.querySelector('h2');
          title.innerText = this.config.transferInfo[status];
          _modal__WEBPACK_IMPORTED_MODULE_1__["objModal"].open(modalInfo, true);
        }
      }
    }
  }, {
    key: "sendData",
    value: function sendData(form) {
      var _this3 = this;

      this.beforeSending();
      var xhr = new XMLHttpRequest();
      xhr.open('POST', this.config.url);

      xhr.onload = function () {
        if (xhr.status === 200) {
          _this3.transferAction('success');

          form.reset();
          var inputs = form.querySelectorAll('[data-validate]:not(:disabled)');
          inputs.forEach(function (input) {
            input.parentElement.classList.remove('validate');
          });
        } else {
          _this3.transferAction('bad');
        }

        _this3.afterSending();
      };

      xhr.send(new FormData(form));
      /*    fetch(this.config.url, {
          method: 'post',
          body: new FormData(form),
        }).then((res) => {
          if (res.ok) {
            this.transferAction('success');
            form.reset();
            const inputs = form.querySelectorAll('[data-validate]:not(:disabled)');
            inputs.forEach((input) => {
              input.parentElement.classList.remove('validate');
            });
          } else {
            this.transferAction('bad');
          }
        }).catch(() => {
          this.transferAction('error');
        }).finally(() => {
          this.afterSending();
        });*/
    }
  }]);

  return Validate;
}();

/***/ }),

/***/ "./js/utils/modal.js":
/*!***************************!*\
  !*** ./js/utils/modal.js ***!
  \***************************/
/*! exports provided: objModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objModal", function() { return objModal; });
/* harmony import */ var _ValidForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ValidForm */ "./js/utils/ValidForm.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var MultiModal = /*#__PURE__*/function () {
  function MultiModal(props) {
    _classCallCheck(this, MultiModal);

    var defaultConfig = {
      openBtnAttribute: 'data-modal-open',
      closeBtnAttribute: 'data-modal-close',
      closeOnOverlay: true,
      multiple: false,
      beforeOpen: function beforeOpen() {},
      beforeClose: function beforeClose() {}
    };
    this.config = Object.assign(defaultConfig, props);
    this.init();
  }

  _createClass(MultiModal, [{
    key: "init",
    value: function init() {
      this.openedWindows = [];
      this.currentWindow = null;
      this.reopen = false;
      this.frozen = false; // отменить обработчки событий

      this.scrollPosition = 0;
      this._focusableEls = 'a[href]:not(:disabled), input:not(:disabled):not([type="hidden"]), select:not(:disabled), textarea:not(:disabled), button:not(:disabled), [contenteditable], [tabindex]:not([tabindex^="-"])';

      if (!MultiModal.overlay) {
        MultiModal.overlay = document.createElement('div');
        MultiModal.overlay.classList.add('modal-overlay');
        document.body.append(MultiModal.overlay);
      }

      this.eventsFeeler();
    }
  }, {
    key: "eventsFeeler",
    value: function eventsFeeler() {
      var _this = this;

      document.addEventListener('click', function (e) {
        if (_this.frozen) return;
        var opener = e.target.closest('[' + _this.config.openBtnAttribute + ']');

        if (opener) {
          e.preventDefault();
          var modalId = opener.getAttribute(_this.config.openBtnAttribute);
          var modal = document.getElementById(modalId);

          _this.open(modal, _this.config.multiple, opener);
        } else if (e.target.closest('[' + _this.config.closeBtnAttribute + ']')) {
          _this.close();
        } else if (_this.config.closeOnOverlay && _this.openedWindows.length) {
          if (!e.target.closest('.modal__wrap')) {
            _this.close();
          }
        }
      });
      document.addEventListener('keydown', function (e) {
        if (_this.frozen) return;

        if ((e.key === 'Escape' || e.key === 'Esc') && _this.openedWindows.length) {
          e.preventDefault();

          _this.close();

          return;
        }

        if (e.key === 'Tab' && _this.openedWindows.length) {
          _this.focusCatcher(e);
        }
      });
    }
  }, {
    key: "open",
    value: function open(selector, multiple, opener) {
      var _this2 = this;

      if (this.openedWindows.length && !multiple) {
        this.reopen = true;
        this.close(selector, multiple, opener);
        return;
      }

      var modal = null;

      if (selector) {
        modal = typeof selector === 'string' ? document.querySelector(selector) : selector;
      }

      if (!selector || !(modal instanceof HTMLElement)) {
        this.removeOverlay();
        return;
      }

      this.currentWindow = {};
      this.currentWindow.modal = modal;
      this.currentWindow.focusableElements = this.currentWindow.modal.querySelectorAll(this._focusableEls);

      if (opener instanceof HTMLElement) {
        this.currentWindow.starter = opener;
        this.currentWindow.starter.setAttribute('aria-expanded', 'true');
      } else {
        this.currentWindow.starter = document.activeElement;
      }

      this.config.beforeOpen(this);

      if (!this.openedWindows.length) {
        this.bodyScrollControl(true);
        MultiModal.overlay.classList.add('modal-overlay--show');
      }

      var setFocus = function setFocus() {
        if (_this2.currentWindow.focusableElements.length) {
          _this2.currentWindow.focusableElements[0].focus();
        }

        _this2.currentWindow.modal.removeEventListener('transitionend', setFocus);
      };

      this.currentWindow.modal.addEventListener('transitionend', setFocus);
      this.currentWindow.modal.setAttribute('aria-hidden', 'false');
      this.currentWindow.modal.classList.add('modal--active');
      this.openedWindows.push(this.currentWindow);
    }
  }, {
    key: "close",
    value: function close(selector, multiple, opener) {
      var _this3 = this;

      this.config.beforeClose(this);
      var _currentWindow = this.openedWindows[this.openedWindows.length - 1];

      _currentWindow.modal.classList.remove('modal--active');

      _currentWindow.modal.setAttribute('aria-hidden', 'true');

      _currentWindow.starter.setAttribute('aria-expanded', 'false');

      _currentWindow.starter.focus();

      this.openedWindows.pop();

      if (this.openedWindows.length) {
        this.currentWindow = this.openedWindows[this.openedWindows.length - 1]; // для фокускэтчера на предыдущей модалке

        return;
      }

      if (this.reopen) {
        this.previousStarter = _currentWindow.starter;
        this.reopen = false;

        var modalOpen = function modalOpen() {
          _this3.open(selector, multiple, opener);

          _currentWindow.modal.removeEventListener('transitionend', modalOpen);
        };

        _currentWindow.modal.addEventListener('transitionend', modalOpen);

        return;
      }

      this.removeOverlay();

      if (this.previousStarter) {
        this.previousStarter.focus();
      }
    }
  }, {
    key: "removeOverlay",
    value: function removeOverlay() {
      this.bodyScrollControl();
      MultiModal.overlay.classList.remove('modal-overlay--show');
    }
  }, {
    key: "focusCatcher",
    value: function focusCatcher(e) {
      var firstFocusableEl = this.currentWindow.focusableElements[0];
      var lastFocusableEl = this.currentWindow.focusableElements[this.currentWindow.focusableElements.length - 1];

      if (e.shiftKey) {
        // shift + tab
        if (document.activeElement === firstFocusableEl) {
          lastFocusableEl.focus();
          e.preventDefault();
        }
      } else {
        // tab
        if (document.activeElement === lastFocusableEl) {
          firstFocusableEl.focus();
          e.preventDefault();
        }
      }
    }
  }, {
    key: "bodyScrollControl",
    value: function bodyScrollControl(open) {
      var html = document.documentElement;

      if (open) {
        this.scrollPosition = self.pageYOffset;
        html.style.top = -this.scrollPosition + 'px';
        html.classList.add('scroll-lock');
      } else {
        html.classList.remove('scroll-lock');
        self.scrollTo(0, this.scrollPosition);
        html.style.top = '';
      }
    }
  }]);

  return MultiModal;
}();

_defineProperty(MultiModal, "overlay", false);

var modalLoginInit = false;
var modalRegisterInit = false;
var objModal = new MultiModal({
  beforeOpen: function beforeOpen(obj) {
    if (obj.currentWindow.modal.id === 'modal-login' && !modalLoginInit) {
      var form = obj.currentWindow.modal.querySelector('form');
      new _ValidForm__WEBPACK_IMPORTED_MODULE_0__["Validate"](form, {
        transferInfo: {
          success: 'Успешный вход',
          bad: 'Удаленный сервер не найден',
          error: 'Сервер недоступен'
        }
      });
      modalLoginInit = true;
    }

    if (obj.currentWindow.modal.id === 'modal-register' && !modalRegisterInit) {
      var _form = obj.currentWindow.modal.querySelector('form');

      new _ValidForm__WEBPACK_IMPORTED_MODULE_0__["Validate"](_form, {
        transferInfo: {
          success: 'Успешная регистрация',
          bad: 'Удаленный сервер не найден',
          error: 'Сервер недоступен'
        }
      });
      modalRegisterInit = true;
    }
  }
});

/***/ }),

/***/ "./js/utils/phoneMask.js":
/*!*******************************!*\
  !*** ./js/utils/phoneMask.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var COUNTRY_CODE = '+7';

var onInputPhoneInput = function onInputPhoneInput(_ref) {
  var target = _ref.target;
  var matrix = "".concat(COUNTRY_CODE, " (___) ___-__-__");
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = target.value.replace(/\D/g, '');

  if (!val.length) {
    val = def;
  }

  target.value = '';
  Array.prototype.forEach.call(matrix, function (item) {
    var isValNumber = /[_\d]/.test(item) && val.length > i;

    if (isValNumber) {
      target.value += val.charAt(i++);
    } else {
      target.value += val.length <= i ? '' : item;
    }
  });
};

var onFocusPhoneInput = function onFocusPhoneInput(target) {
  if (!target.value) {
    target.value = COUNTRY_CODE;
  }

  target.addEventListener('input', onInputPhoneInput);
  target.addEventListener('blur', onBlurPhoneInput);
};

var onBlurPhoneInput = function onBlurPhoneInput(_ref2) {
  var target = _ref2.target;

  if (target.value === COUNTRY_CODE) {
    target.value = '';
  }

  target.removeEventListener('input', onInputPhoneInput);
  target.removeEventListener('blur', onBlurPhoneInput);
};

/* harmony default export */ __webpack_exports__["default"] = (onFocusPhoneInput);

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map